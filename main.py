from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command, CommandObject, CommandStart
from aiogram.types import InlineKeyboardButton
from aiogram.utils.formatting import Text
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F
import logging
import re
from log_writer import save_log
from json_worker import *
import asyncio

logging.basicConfig(level=logging.INFO)
bot = Bot(token='YOUR_SECRET_TOCKEN')
dp = Dispatcher()


# –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(CommandStart(
    deep_link=True,  # –¥–∏–∫–ø–∏–∫
    magic=F.args.regexp(re.compile(r"(\d+)"))
))
async def set_waiting_to_send_message(message: types.Message, command: CommandObject):
    chat_to_send_id = command.args
    if chat_to_send_id.isdigit() and is_address_in_list(int(chat_to_send_id)):
        await save_log(message, "start_waiting_to_write", chat_to_send_id, get_username(int(chat_to_send_id)))

        add_in_order_of_waiting(message.chat.id, int(chat_to_send_id))

        content = Text(
            "–ü—Ä–∏–≤–µ—Ç üëã\n"
            "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ üéâ–±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ üëÄ–∞–Ω–æ–Ω–∏–º–Ω–æ\n\n"
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–ºüòû\n"
            "–ù–æ –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–πüòÅ"
        )

        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="‚ùå–û—Ç–º–µ–Ω–∞",
            callback_data="close"
        ))

        await message.answer(**content.as_kwargs(), reply_markup=builder.as_markup())
    else:
        await save_log(message, "bad_address", chat_to_send_id, message.chat.id, message.from_user.username)
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—éüòû\n"
                             "–ü—Ä–æ–≤–µ—Ä—å—Ç–µüïµÔ∏è‚Äç‚ôÇÔ∏è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ª–∏ –≤—ã –ø—Ä–∞–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É")


# –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("sendAgain_"))
async def send_anonym_message_again(callback: types.CallbackQuery):
    com = CommandObject(prefix="/", command="start", args=f"{callback.data.split("_")[1]}")
    await set_waiting_to_send_message(callback.message, com)
    await callback.answer()


# –û—Ç–º–µ–Ω–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.callback_query(F.data == "close")
async def close_callback(call: types.CallbackQuery):
    await save_log(call.message, "stop_wait")
    if is_message_on_order(call.message.chat.id):
        del_from_order_of_waiting(call.message.chat.id)
    await call.message.delete()
    await call.answer()


# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(F.text)
async def send_anonym_message(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if is_message_on_order(message.chat.id) and is_address_in_list(get_chat(message.chat.id)):
        await save_log(message, "send_anon_message", get_chat(message.chat.id), get_username(get_chat(message.chat.id)))

        mes = await bot.send_message(
            get_chat(message.chat.id),
            f"üëÄ<b>–¢–µ–±–µ –ø—Ä–∏—à–ª–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            + message.html_text
            + "\n\n‚Ü©Ô∏è–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–≤–∞–π–ø–Ω–∏ –≤–ª–µ–≤–æ",
            parse_mode="html"
        )

        add_new_message_to_ans(mes.message_id, message.chat.id, message.message_id)

        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="üîÅ–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑",
            callback_data=f"sendAgain_{get_chat(message.chat.id)}"
        ))

        await message.answer("‚úÖ–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=builder.as_markup())

        del_from_order_of_waiting(message.chat.id)

        if not is_address_in_list(message.chat.id):
            await message.answer("–ß—Ç–æ–±—ã <b>–Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å</b> –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—èüëÄ –Ω–∞–ø–∏—à–∏—Ç–µ /start", parse_mode="html")

    # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif message.reply_to_message is not None and is_mes_in_ans_list(message.reply_to_message.message_id):
        ans_data = get_data_to_ans(message.reply_to_message.message_id)
        await save_log(message, "send_anon_answer", ans_data[0])
        mes = await bot.send_message(
            ans_data[0],
            "üëÄ<b>–¢–µ–±–µ –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç</b>\n\n" + message.html_text + "\n\n‚Ü©Ô∏è–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–≤–∞–π–ø–Ω–∏ –≤–ª–µ–≤–æ",
            parse_mode="html",
            reply_to_message_id=ans_data[1]
        )
        add_new_message_to_ans(mes.message_id, message.chat.id, message.message_id)
        await message.answer("‚úÖ–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        if not is_address_in_list(message.chat.id):
            await message.answer("–ß—Ç–æ–±—ã <b>–Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å</b> –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—èüëÄ –Ω–∞–ø–∏—à–∏—Ç–µ /start", parse_mode="html")

    # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–∏–º –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        if message.html_text == "/start":
            await start(message)
        else:
            await save_log(message, "message")
            await message.answer("–ß—Ç–æ–±—ã <b>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å</b> –∫–æ–º—É-–Ω–∏–±—É–¥—å —Å–æ–æ–±—â–µ–Ω–∏–µüí¨ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ –µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n"
                                 "–ß—Ç–æ–±—ã <b>–Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å</b> –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—èüëÄ –Ω–∞–ø–∏—à–∏—Ç–µ /start", parse_mode="html")


# –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞–Ω–æ–Ω–∏–º–∫—É
@dp.message(Command("start"))
async def start(message: types.Message):
    await save_log(message, "satrt_get_message")
    add_new_address(message.chat.id, message.from_user.username)
    content = Text(
        "–ü—Ä–∏–≤–µ—Ç üëã\n"
        "–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è?\n"
        "–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:\n\n"
        f"üëâ t.me/AnonymousMes_bot?start={message.chat.id}\n\n"
        "–°–∫–æ—Ä–µ–π –æ—Ç—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º!"
    )
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data="how_it_works"))
    builder.row(InlineKeyboardButton(text="üîó–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                                     url="t.me/share/url?url=–•–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?\n"
                                         "–¢–æ–≥–¥–∞ –¥–µ—Ä–∂–∏\n"
                                         f"\nüëâ t.me/AnonymousMes_bot?start={message.chat.id}"))
    await message.answer(**content.as_kwargs(), reply_markup=builder.as_markup())


# –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?"
@dp.callback_query(F.data == "how_it_works")
async def how_it_works(calback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîó–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                                     url="t.me/share/url?url=–•–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?\n"
                                         "–¢–æ–≥–¥–∞ –¥–µ—Ä–∂–∏\n"
                                         f"\nüëâ t.me/AnonymousMes_bot?start={calback.message.chat.id}"
                                     ))

    content = Text(
        "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n\n"
        f"üëâ t.me/AnonymousMes_bot?start={calback.message.chat.id}\n\n"
        "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–ºüï∫ –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—èüëÄ"
    )

    await calback.message.edit_text(**content.as_kwargs(), reply_markup=builder.as_markup())
    await calback.answer()


# TODO
# –ü–µ—Ä–µ—Å–ª–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
'''@dp.message()
async def forward_copy_mes(message):
    if is_message_on_order(message.chat.id):
        # await bot.send_message(waiting_to_send[message.chat.id], "–í–∞–º –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await message.send_copy(get_chat(message.chat.id))'''


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
